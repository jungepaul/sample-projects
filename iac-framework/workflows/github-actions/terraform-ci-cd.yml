name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'modules/**'
      - '.github/workflows/terraform-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'modules/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.6.0"
  TF_CLOUD_ORGANIZATION: "${{ secrets.TF_CLOUD_ORGANIZATION }}"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  AWS_REGION: "us-west-2"

jobs:
  # =============================================================================
  # Security and Compliance Scanning
  # =============================================================================
  security-scan:
    name: Security & Compliance Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Install security tools
      run: |
        # Install Checkov
        pip install checkov
        
        # Install TFSec
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        
        # Install Conftest
        wget https://github.com/open-policy-agent/conftest/releases/download/v0.46.0/conftest_0.46.0_Linux_x86_64.tar.gz
        tar xzf conftest_0.46.0_Linux_x86_64.tar.gz
        sudo mv conftest /usr/local/bin
        
        # Install Infracost
        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh

    - name: Run Checkov scan
      run: |
        checkov -d . --framework terraform \
          --output json --output-file checkov-results.json \
          --soft-fail
      continue-on-error: true

    - name: Run TFSec scan
      run: |
        tfsec . --format json --out tfsec-results.json --soft-fail
      continue-on-error: true

    - name: Run OPA/Conftest policies
      run: |
        find . -name "*.tf" -not -path "./.*" | xargs conftest test \
          --policy policies/opa/ \
          --output json > conftest-results.json || true
      continue-on-error: true

    - name: Generate cost estimate
      env:
        INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
      run: |
        infracost breakdown --path . \
          --format json \
          --out-file infracost-results.json
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          checkov-results.json
          tfsec-results.json
          conftest-results.json
          infracost-results.json

    - name: Comment security results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔍 Security & Compliance Scan Results\n\n';
          
          // Parse Checkov results
          try {
            const checkovResults = JSON.parse(fs.readFileSync('checkov-results.json', 'utf8'));
            const failed = checkovResults.results?.failed_checks?.length || 0;
            const passed = checkovResults.results?.passed_checks?.length || 0;
            comment += `**Checkov**: ✅ ${passed} passed, ❌ ${failed} failed\n`;
          } catch (e) {
            comment += '**Checkov**: ⚠️ Error parsing results\n';
          }
          
          // Parse TFSec results
          try {
            const tfsecResults = JSON.parse(fs.readFileSync('tfsec-results.json', 'utf8'));
            const issues = tfsecResults.results?.length || 0;
            comment += `**TFSec**: ${issues === 0 ? '✅' : '❌'} ${issues} security issues found\n`;
          } catch (e) {
            comment += '**TFSec**: ⚠️ Error parsing results\n';
          }
          
          // Parse Infracost results
          try {
            const infracostResults = JSON.parse(fs.readFileSync('infracost-results.json', 'utf8'));
            const totalCost = infracostResults.totalMonthlyCost || 'Unknown';
            comment += `**Cost Estimate**: 💰 $${totalCost}/month\n`;
          } catch (e) {
            comment += '**Cost Estimate**: ⚠️ Unable to calculate\n';
          }
          
          comment += '\n📋 View detailed results in the workflow artifacts.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # =============================================================================
  # Terraform Plan
  # =============================================================================
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    strategy:
      matrix:
        environment: [dev, staging]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: examples/environments/${{ matrix.environment }}
      run: terraform init

    - name: Terraform Validate
      working-directory: examples/environments/${{ matrix.environment }}
      run: terraform validate

    - name: Terraform Plan
      working-directory: examples/environments/${{ matrix.environment }}
      run: |
        terraform plan \
          -detailed-exitcode \
          -out=tfplan-${{ matrix.environment }} \
          -var-file="terraform.tfvars"
      continue-on-error: true
      id: plan

    - name: Generate plan summary
      working-directory: examples/environments/${{ matrix.environment }}
      run: |
        terraform show -json tfplan-${{ matrix.environment }} > tfplan-${{ matrix.environment }}.json
        
        # Create human-readable summary
        echo "## Terraform Plan Summary - ${{ matrix.environment }}" > plan-summary-${{ matrix.environment }}.md
        echo "" >> plan-summary-${{ matrix.environment }}.md
        echo '```' >> plan-summary-${{ matrix.environment }}.md
        terraform show tfplan-${{ matrix.environment }} >> plan-summary-${{ matrix.environment }}.md
        echo '```' >> plan-summary-${{ matrix.environment }}.md

    - name: Upload plan artifacts
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: |
          examples/environments/${{ matrix.environment }}/tfplan-${{ matrix.environment }}
          examples/environments/${{ matrix.environment }}/tfplan-${{ matrix.environment }}.json
          examples/environments/${{ matrix.environment }}/plan-summary-${{ matrix.environment }}.md

    - name: Comment plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const planSummary = fs.readFileSync('examples/environments/${{ matrix.environment }}/plan-summary-${{ matrix.environment }}.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: planSummary
          });

  # =============================================================================
  # Terraform Apply
  # =============================================================================
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-plan]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    
    environment: 
      name: ${{ matrix.environment }}
      url: https://console.aws.amazon.com/
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || 'dev' }}
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download plan artifacts
      if: github.event_name != 'workflow_dispatch'
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: examples/environments/${{ matrix.environment }}

    - name: Terraform Init
      working-directory: examples/environments/${{ matrix.environment }}
      run: terraform init

    - name: Terraform Apply
      working-directory: examples/environments/${{ matrix.environment }}
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # For manual triggers, run fresh plan and apply
          terraform apply -auto-approve -var-file="terraform.tfvars"
        else
          # For automatic deploys, use the plan from the plan job
          terraform apply -auto-approve tfplan-${{ matrix.environment }}
        fi

    - name: Export outputs
      working-directory: examples/environments/${{ matrix.environment }}
      run: |
        terraform output -json > terraform-outputs-${{ matrix.environment }}.json

    - name: Upload outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs-${{ matrix.environment }}
        path: examples/environments/${{ matrix.environment }}/terraform-outputs-${{ matrix.environment }}.json

  # =============================================================================
  # Terraform Destroy
  # =============================================================================
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    environment: 
      name: ${{ github.event.inputs.environment }}
      url: https://console.aws.amazon.com/
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: examples/environments/${{ github.event.inputs.environment }}
      run: terraform init

    - name: Terraform Destroy
      working-directory: examples/environments/${{ github.event.inputs.environment }}
      run: |
        terraform destroy -auto-approve -var-file="terraform.tfvars"

  # =============================================================================
  # Drift Detection
  # =============================================================================
  drift-detection:
    name: Infrastructure Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'drift-check')
    
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: examples/environments/${{ matrix.environment }}
      run: terraform init

    - name: Check for drift
      working-directory: examples/environments/${{ matrix.environment }}
      run: |
        terraform plan -detailed-exitcode -var-file="terraform.tfvars" > drift-check-${{ matrix.environment }}.txt
        DRIFT_EXIT_CODE=$?
        
        if [ $DRIFT_EXIT_CODE -eq 2 ]; then
          echo "DRIFT_DETECTED=true" >> $GITHUB_ENV
          echo "Infrastructure drift detected in ${{ matrix.environment }}"
        else
          echo "DRIFT_DETECTED=false" >> $GITHUB_ENV
          echo "No infrastructure drift detected in ${{ matrix.environment }}"
        fi

    - name: Create drift issue
      if: env.DRIFT_DETECTED == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const driftOutput = fs.readFileSync('examples/environments/${{ matrix.environment }}/drift-check-${{ matrix.environment }}.txt', 'utf8');
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Infrastructure Drift Detected - ${{ matrix.environment }}',
            body: `Infrastructure drift has been detected in the **${{ matrix.environment }}** environment.
            
## Drift Details

\`\`\`
${driftOutput}
\`\`\`

## Next Steps

1. Review the drift details above
2. Determine if the changes are expected
3. Update the Terraform configuration if needed
4. Run \`terraform apply\` to resolve the drift

**Environment**: ${{ matrix.environment }}
**Detection Time**: ${new Date().toISOString()}
**Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
            labels: ['infrastructure', 'drift', '${{ matrix.environment }}', 'urgent']
          });
          
          console.log(`Created drift detection issue #${issue.data.number}`);

# =============================================================================
# Scheduled Jobs
# =============================================================================
on:
  schedule:
    # Run drift detection daily at 6 AM UTC
    - cron: '0 6 * * *'