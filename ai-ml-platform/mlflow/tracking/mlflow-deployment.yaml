apiVersion: v1
kind: ConfigMap
metadata:
  name: mlflow-config
  namespace: mlflow
data:
  mlflow.conf: |
    [database]
    backend_store_uri = postgresql://mlflow:mlflow123!@postgres-service:5432/mlflow
    default_artifact_root = s3://ai-ml-platform-ml-dev-ml-artifacts/mlflow
    
    [server]
    host = 0.0.0.0
    port = 5000
    workers = 4
    
    [tracking]
    registry_store_uri = postgresql://mlflow:mlflow123!@postgres-service:5432/mlflow

---
apiVersion: v1
kind: Secret
metadata:
  name: mlflow-secrets
  namespace: mlflow
type: Opaque
data:
  database-url: cG9zdGdyZXNxbDovL21sZmxvdzptbGZsb3cxMjMhQHBvc3RncmVzLXNlcnZpY2U6NTQzMi9tbGZsb3c=  # postgresql://mlflow:mlflow123!@postgres-service:5432/mlflow
  aws-access-key: ""  # Add your AWS access key (base64 encoded)
  aws-secret-key: ""  # Add your AWS secret key (base64 encoded)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-server
  namespace: mlflow
  labels:
    app: mlflow-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mlflow-server
  template:
    metadata:
      labels:
        app: mlflow-server
    spec:
      containers:
      - name: mlflow-server
        image: python:3.9-slim
        command:
        - /bin/bash
        - -c
        - |
          pip install mlflow==2.8.1 psycopg2-binary boto3
          mlflow server \
            --backend-store-uri postgresql://mlflow:mlflow123!@postgres-service:5432/mlflow \
            --default-artifact-root s3://ai-ml-platform-ml-dev-ml-artifacts/mlflow \
            --host 0.0.0.0 \
            --port 5000 \
            --workers 4
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: aws-access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: aws-secret-key
        - name: AWS_DEFAULT_REGION
          value: "us-west-2"
        - name: MLFLOW_S3_ENDPOINT_URL
          value: "https://s3.us-west-2.amazonaws.com"
        volumeMounts:
        - name: mlflow-config
          mountPath: /etc/mlflow
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mlflow-config
        configMap:
          name: mlflow-config

---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-server
  namespace: mlflow
  labels:
    app: mlflow-server
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app: mlflow-server

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mlflow-server-ingress
  namespace: mlflow
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: mlflow.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mlflow-server
            port:
              number: 5000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: mlflow
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "mlflow"
        - name: POSTGRES_USER
          value: "mlflow"
        - name: POSTGRES_PASSWORD
          value: "mlflow123!"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - mlflow
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - mlflow
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: mlflow
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgres

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: mlflow
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2

---
apiVersion: v1
kind: Namespace
metadata:
  name: mlflow
  labels:
    name: mlflow